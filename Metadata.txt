Metadata of "strata" was published successfully.

contracts/STRATA Contract Source Code.sol : ipfs://QmSKijf8kqXNBTj7Sofd1eHS2TLdQynQz8igvWUYACJytn

metadata.json : ipfs://Qmcj7P6KZmZAtWaXdmx9XQrA9KhVJkRksmuKUaDciiDrXk

Contract ABI:

[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minTokensBeforeSwap","type":"uint256"}],"name":"MinTokensBeforeSwapUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokensSwapped","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ethReceived","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokensIntoLiqudity","type":"uint256"}],"name":"SwapAndLiquify","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"enabled","type":"bool"}],"name":"SwapAndLiquifyEnabledUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"_liquidityFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_maxTxAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_taxFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tAmount","type":"uint256"}],"name":"deliver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"excludeFromFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"excludeFromReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"geUnlockTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"includeInFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"includeInReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isExcludedFromFee","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isExcludedFromReward","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"time","type":"uint256"}],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tAmount","type":"uint256"},{"internalType":"bool","name":"deductTransferFee","type":"bool"}],"name":"reflectionFromToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"liquidityFee","type":"uint256"}],"name":"setLiquidityFeePercent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"maxTxPercent","type":"uint256"}],"name":"setMaxTxPercent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_enabled","type":"bool"}],"name":"setSwapAndLiquifyEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taxFee","type":"uint256"}],"name":"setTaxFeePercent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"swapAndLiquifyEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"rAmount","type":"uint256"}],"name":"tokenFromReflection","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uniswapV2Pair","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uniswapV2Router","outputs":[{"internalType":"contract IUniswapV2Router02","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]

Contract Creation Code:



ByteCode Decompilation Result:

#
#  Panoramix v4 Oct 2019 
#  Decompiled source of bsc:0x9bA16338ADbB09e77062e99A25D1b5a59404636c
# 
#  Let's make the world open source 
# 
#
#  I failed with these: 
#  - transferFrom(address _from, address _to, uint256 _value)
#  - unknown3bd5d173(?)
#  - unknown4549b039(?)
#  - transfer(address _to, uint256 _value)
#  - _fallback()
#  All the rest is below.
#

const unknown1694505e = 0x10ed43c718714eb63d5aa57b78b54704e256024e
const unknown49bd5a5e = 0xbfb65e2a8a55b72cb3e0f16bad52a106f811665b

def storage:
  owner is addr at storage 0
  stor1 is addr at storage 1
  unknownb6c52324 is uint256 at storage 2
  stor3 is mapping of uint256 at storage 3
  stor4 is mapping of uint256 at storage 4
  allowance is mapping of uint256 at storage 5
  stor6 is mapping of uint8 at storage 6
  stor7 is mapping of uint8 at storage 7
  stor8 is array of addr at storage 8
  totalSupply is uint256 at storage 9
  stor10 is uint256 at storage 10
  totalFees is uint256 at storage 11
  name is array of uint256 at storage 12
  symbol is array of uint256 at storage 13
  decimals is uint8 at storage 14
  unknown3b124fe7 is uint256 at storage 15
  unknown6bc87c3a is uint256 at storage 17
  unknown4a74bb02 is uint8 at storage 19 offset 8
  stor19 is uint256 at storage 19 offset 8
  unknown7d1db4a5 is uint256 at storage 20

def name(): # not payable
  return name[0 len name.length]

def totalFees(): # not payable
  return totalFees

def totalSupply(): # not payable
  return totalSupply

def decimals(): # not payable
  return decimals

def unknown3b124fe7(): # not payable
  return unknown3b124fe7

def unknown4a74bb02(): # not payable
  return bool(uint8(unknown4a74bb02))

def unknown5342acb4(addr _param1): # not payable
  require calldata.size - 4 >= 32
  return bool(stor6[addr(_param1)])

def unknown6bc87c3a(): # not payable
  return unknown6bc87c3a

def unknown7d1db4a5(): # not payable
  return unknown7d1db4a5

def unknown88f82020(addr _param1): # not payable
  require calldata.size - 4 >= 32
  return bool(stor7[addr(_param1)])

def owner(): # not payable
  return owner

def symbol(): # not payable
  return symbol[0 len symbol.length]

def unknownb6c52324(): # not payable
  return unknownb6c52324

def allowance(address _owner, address _spender): # not payable
  require calldata.size - 4 >= 64
  return allowance[addr(_owner)][addr(_spender)]

#
#  Regular functions
#

def unknown061c82d0(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  unknown3b124fe7 = _param1

def unknown8ee88c53(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  unknown6bc87c3a = _param1

def unknown437823ec(addr _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  stor6[addr(_param1)] = 1

def unknownea2f0b37(addr _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  stor6[addr(_param1)] = 0

def renounceOwnership(): # not payable
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)
  owner = 0

def unknownc49b9a80(bool _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  Mask(248, 0, stor19) = Mask(248, 0, _param1)
  log 0x53726dfc: _param1

def lock(uint256 _expiration): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  stor1 = owner
  owner = 0
  unknownb6c52324 = block.timestamp + _expiration
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)

def unlock(): # not payable
  if stor1 != caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  35,
                  0x6e596f7520646f6e27742068617665207065726d697373696f6e20746f20756e6c6f63,
                  mem[199 len 29]
  if block.timestamp <= unknownb6c52324:
      revert with 0, 'Contract is locked until 7 days'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=stor1)
  owner = stor1

def transferOwnership(address _newOwner): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  38,
                  0x734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                  mem[202 len 26]
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)
  owner = _newOwner

def unknownd543dbeb(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  else:
      if totalSupply:
          require totalSupply
          if totalSupply * _param1 / totalSupply != _param1:
              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                          32,
                          33,
                          0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                          mem[197 len 31]
          else:
              unknown7d1db4a5 = totalSupply * _param1 / 100
              stop
      else:
          unknown7d1db4a5 = 0
          stop

def approve(address _spender, uint256 _value): # not payable
  require calldata.size - 4 >= 64
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not _spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][addr(_spender)] = _value
  log Approval(
        address owner=_value,
        address spender=caller,
        uint256 value=_spender)
  return 1

def unknown3685d419(addr _param1): # not payable
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if not stor7[addr(_param1)]:
      revert with 0, 'Account is already excluded'
  idx = 0
  while idx < stor8.length:
      mem[0] = 8
      if stor8[idx] != _param1:
          idx = idx + 1
          continue 
      require stor8.length - 1 < stor8.length
      require idx < stor8.length
      stor8[idx] = stor8[stor8.length]
      stor4[addr(_param1)] = 0
      stor7[addr(_param1)] = 0
      require stor8.length
      stor8[stor8.length] = 0
      stor8.length--
      stop

def decreaseAllowance(address _spender, uint256 _subtractedValue): # not payable
  require calldata.size - 4 >= 64
  if _subtractedValue > allowance[caller][addr(_spender)]:
      revert with 0, 
                  32,
                  37,
                  0x6b45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                  mem[165 len 27],
                  mem[219 len 5]
  if not caller:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
  if not _spender:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
  allowance[caller][addr(_spender)] -= _subtractedValue
  log Approval(
        address owner=(allowance[caller][addr(_spender)] - _subtractedValue),
        address spender=caller,
        uint256 value=_spender)
  return 1

def increaseAllowance(address _spender, uint256 _addedValue): # not payable
  require calldata.size - 4 >= 64
  if allowance[caller][addr(_spender)] + _addedValue < allowance[caller][addr(_spender)]:
      revert with 0, 'SafeMath: addition overflow'
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not _spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][addr(_spender)] += _addedValue
  log Approval(
        address owner=(allowance[caller][addr(_spender)] + _addedValue),
        address spender=caller,
        uint256 value=_spender)
  return 1

def unknown2d838119(uint256 _param1) payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >= 32
  if _param1 > stor10:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  42,
                  0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                  mem[206 len 22]
  idx = 0
  s = totalSupply
  t = stor10
  while idx < stor8.length:
      mem[0] = stor8[idx]
      mem[32] = 3
      if stor3[stor8[idx]] > t:
          _118 = mem[64]
          mem[64] = mem[64] + 64
          mem[_118] = 26
          mem[_118 + 32] = 'SafeMath: division by zero'
          if totalSupply <= 0:
              _123 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_123 + idx + 68] = mem[_118 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_123 + 68] = mem[_123 + 74 len 26]
              revert with memory
                from mem[64]
                 len _123 + -mem[64] + 100
          require totalSupply
          _151 = mem[64]
          mem[64] = mem[64] + 64
          mem[_151] = 26
          mem[_151 + 32] = 'SafeMath: division by zero'
          if stor10 / totalSupply > 0:
              require stor10 / totalSupply
              return (_param1 / stor10 / totalSupply)
          _163 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 26
          idx = 0
          while idx < 26:
              mem[_163 + idx + 68] = mem[_151 + idx + 32]
              idx = idx + 32
              continue 
          mem[_163 + 68] = mem[_163 + 74 len 26]
          revert with memory
            from mem[64]
             len _163 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 4
      if stor4[stor8[idx]] > s:
          _126 = mem[64]
          mem[64] = mem[64] + 64
          mem[_126] = 26
          mem[_126 + 32] = 'SafeMath: division by zero'
          if totalSupply <= 0:
              _133 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_133 + idx + 68] = mem[_126 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_133 + 68] = mem[_133 + 74 len 26]
              revert with memory
                from mem[64]
                 len _133 + -mem[64] + 100
          require totalSupply
          _169 = mem[64]
          mem[64] = mem[64] + 64
          mem[_169] = 26
          mem[_169 + 32] = 'SafeMath: division by zero'
          if stor10 / totalSupply > 0:
              require stor10 / totalSupply
              return (_param1 / stor10 / totalSupply)
          _176 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 26
          idx = 0
          while idx < 26:
              mem[_176 + idx + 68] = mem[_169 + idx + 32]
              idx = idx + 32
              continue 
          mem[_176 + 68] = mem[_176 + 74 len 26]
          revert with memory
            from mem[64]
             len _176 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 3
      _122 = mem[64]
      mem[64] = mem[64] + 64
      mem[_122] = 30
      mem[_122 + 32] = 'SafeMath: subtraction overflow'
      if stor3[stor8[idx]] > t:
          _127 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 30
          idx = 0
          while idx < 30:
              mem[_127 + idx + 68] = mem[_122 + idx + 32]
              idx = idx + 32
              continue 
          mem[_127 + 68] = mem[_127 + 70 len 30]
          revert with memory
            from mem[64]
             len _127 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 4
      _152 = mem[64]
      mem[64] = mem[64] + 64
      mem[_152] = 30
      mem[_152 + 32] = 'SafeMath: subtraction overflow'
      if stor4[stor8[idx]] <= s:
          idx = idx + 1
          s = s - stor4[stor8[idx]]
          t = t - stor3[stor8[idx]]
          continue 
      _166 = mem[64]
      mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
      mem[mem[64] + 4] = 32
      mem[mem[64] + 36] = 30
      idx = 0
      while idx < 30:
          mem[_166 + idx + 68] = mem[_152 + idx + 32]
          idx = idx + 32
          continue 
      mem[_166 + 68] = mem[_166 + 70 len 30]
      revert with memory
        from mem[64]
         len _166 + -mem[64] + 100
  if totalSupply <= 0:
      revert with 0, 'SafeMath: division by zero'
  if totalSupply:
      if t >= stor10 / totalSupply:
          if s <= 0:
              revert with 0, 'SafeMath: division by zero'
          if s:
              if t / s <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if t / s:
                  return (_param1 / t / s)
      else:
          if totalSupply <= 0:
              revert with 0, 'SafeMath: division by zero'
          if totalSupply:
              if stor10 / totalSupply <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if stor10 / totalSupply:
                  return (_param1 / stor10 / totalSupply)
  revert

def balanceOf(address _owner) payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >= 32
  if stor7[addr(_owner)]:
      return stor4[addr(_owner)]
  mem[0] = _owner
  mem[32] = 3
  if stor3[addr(_owner)] > stor10:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  42,
                  0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                  mem[206 len 22]
  idx = 0
  s = totalSupply
  t = stor10
  while idx < stor8.length:
      mem[0] = stor8[idx]
      mem[32] = 3
      if stor3[stor8[idx]] > t:
          _123 = mem[64]
          mem[64] = mem[64] + 64
          mem[_123] = 26
          mem[_123 + 32] = 'SafeMath: division by zero'
          if totalSupply <= 0:
              _128 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_128 + idx + 68] = mem[_123 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_128 + 68] = mem[_128 + 74 len 26]
              revert with memory
                from mem[64]
                 len _128 + -mem[64] + 100
          require totalSupply
          _156 = mem[64]
          mem[64] = mem[64] + 64
          mem[_156] = 26
          mem[_156 + 32] = 'SafeMath: division by zero'
          if stor10 / totalSupply > 0:
              require stor10 / totalSupply
              return (stor3[addr(_owner)] / stor10 / totalSupply)
          _168 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 26
          idx = 0
          while idx < 26:
              mem[_168 + idx + 68] = mem[_156 + idx + 32]
              idx = idx + 32
              continue 
          mem[_168 + 68] = mem[_168 + 74 len 26]
          revert with memory
            from mem[64]
             len _168 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 4
      if stor4[stor8[idx]] > s:
          _131 = mem[64]
          mem[64] = mem[64] + 64
          mem[_131] = 26
          mem[_131 + 32] = 'SafeMath: division by zero'
          if totalSupply <= 0:
              _138 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_138 + idx + 68] = mem[_131 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_138 + 68] = mem[_138 + 74 len 26]
              revert with memory
                from mem[64]
                 len _138 + -mem[64] + 100
          require totalSupply
          _174 = mem[64]
          mem[64] = mem[64] + 64
          mem[_174] = 26
          mem[_174 + 32] = 'SafeMath: division by zero'
          if stor10 / totalSupply > 0:
              require stor10 / totalSupply
              return (stor3[addr(_owner)] / stor10 / totalSupply)
          _181 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 26
          idx = 0
          while idx < 26:
              mem[_181 + idx + 68] = mem[_174 + idx + 32]
              idx = idx + 32
              continue 
          mem[_181 + 68] = mem[_181 + 74 len 26]
          revert with memory
            from mem[64]
             len _181 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 3
      _127 = mem[64]
      mem[64] = mem[64] + 64
      mem[_127] = 30
      mem[_127 + 32] = 'SafeMath: subtraction overflow'
      if stor3[stor8[idx]] > t:
          _132 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 30
          idx = 0
          while idx < 30:
              mem[_132 + idx + 68] = mem[_127 + idx + 32]
              idx = idx + 32
              continue 
          mem[_132 + 68] = mem[_132 + 70 len 30]
          revert with memory
            from mem[64]
             len _132 + -mem[64] + 100
      require idx < stor8.length
      mem[0] = stor8[idx]
      mem[32] = 4
      _157 = mem[64]
      mem[64] = mem[64] + 64
      mem[_157] = 30
      mem[_157 + 32] = 'SafeMath: subtraction overflow'
      if stor4[stor8[idx]] <= s:
          idx = idx + 1
          s = s - stor4[stor8[idx]]
          t = t - stor3[stor8[idx]]
          continue 
      _171 = mem[64]
      mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
      mem[mem[64] + 4] = 32
      mem[mem[64] + 36] = 30
      idx = 0
      while idx < 30:
          mem[_171 + idx + 68] = mem[_157 + idx + 32]
          idx = idx + 32
          continue 
      mem[_171 + 68] = mem[_171 + 70 len 30]
      revert with memory
        from mem[64]
         len _171 + -mem[64] + 100
  if totalSupply <= 0:
      revert with 0, 'SafeMath: division by zero'
  if totalSupply:
      if t >= stor10 / totalSupply:
          if s <= 0:
              revert with 0, 'SafeMath: division by zero'
          if s:
              if t / s <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if t / s:
                  return (stor3[addr(_owner)] / t / s)
      else:
          if totalSupply <= 0:
              revert with 0, 'SafeMath: division by zero'
          if totalSupply:
              if stor10 / totalSupply <= 0:
                  revert with 0, 'SafeMath: division by zero'
              if stor10 / totalSupply:
                  return (stor3[addr(_owner)] / stor10 / totalSupply)
  revert

def unknown52390c02(addr _param1) payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if stor7[addr(_param1)]:
      revert with 0, 'Account is already excluded'
  if stor3[addr(_param1)] > 0:
      mem[0] = _param1
      mem[32] = 3
      if stor3[addr(_param1)] > stor10:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      42,
                      0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                      mem[206 len 22]
      idx = 0
      s = totalSupply
      t = stor10
      while idx < stor8.length:
          mem[0] = stor8[idx]
          mem[32] = 3
          if stor3[stor8[idx]] > t:
              _131 = mem[64]
              mem[64] = mem[64] + 64
              mem[_131] = 26
              mem[_131 + 32] = 'SafeMath: division by zero'
              if totalSupply <= 0:
                  _136 = mem[64]
                  mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[mem[64] + 4] = 32
                  mem[mem[64] + 36] = 26
                  idx = 0
                  while idx < 26:
                      mem[_136 + idx + 68] = mem[_131 + idx + 32]
                      idx = idx + 32
                      continue 
                  mem[_136 + 68] = mem[_136 + 74 len 26]
                  revert with memory
                    from mem[64]
                     len _136 + -mem[64] + 100
              require totalSupply
              _164 = mem[64]
              mem[64] = mem[64] + 64
              mem[_164] = 26
              mem[_164 + 32] = 'SafeMath: division by zero'
              if stor10 / totalSupply > 0:
                  require stor10 / totalSupply
                  stor4[addr(_param1)] = stor3[addr(_param1)] / stor10 / totalSupply
                  stor7[addr(_param1)] = 1
                  stor8.length++
                  stor8[stor8.length] = _param1
                  stop
              _176 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_176 + idx + 68] = mem[_164 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_176 + 68] = mem[_176 + 74 len 26]
              revert with memory
                from mem[64]
                 len _176 + -mem[64] + 100
          require idx < stor8.length
          mem[0] = stor8[idx]
          mem[32] = 4
          if stor4[stor8[idx]] > s:
              _139 = mem[64]
              mem[64] = mem[64] + 64
              mem[_139] = 26
              mem[_139 + 32] = 'SafeMath: division by zero'
              if totalSupply <= 0:
                  _146 = mem[64]
                  mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[mem[64] + 4] = 32
                  mem[mem[64] + 36] = 26
                  idx = 0
                  while idx < 26:
                      mem[_146 + idx + 68] = mem[_139 + idx + 32]
                      idx = idx + 32
                      continue 
                  mem[_146 + 68] = mem[_146 + 74 len 26]
                  revert with memory
                    from mem[64]
                     len _146 + -mem[64] + 100
              require totalSupply
              _182 = mem[64]
              mem[64] = mem[64] + 64
              mem[_182] = 26
              mem[_182 + 32] = 'SafeMath: division by zero'
              if stor10 / totalSupply > 0:
                  require stor10 / totalSupply
                  stor4[addr(_param1)] = stor3[addr(_param1)] / stor10 / totalSupply
                  stor7[addr(_param1)] = 1
                  stor8.length++
                  stor8[stor8.length] = _param1
                  stop
              _189 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 26
              idx = 0
              while idx < 26:
                  mem[_189 + idx + 68] = mem[_182 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_189 + 68] = mem[_189 + 74 len 26]
              revert with memory
                from mem[64]
                 len _189 + -mem[64] + 100
          require idx < stor8.length
          mem[0] = stor8[idx]
          mem[32] = 3
          _135 = mem[64]
          mem[64] = mem[64] + 64
          mem[_135] = 30
          mem[_135 + 32] = 'SafeMath: subtraction overflow'
          if stor3[stor8[idx]] > t:
              _140 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = 30
              idx = 0
              while idx < 30:
                  mem[_140 + idx + 68] = mem[_135 + idx + 32]
                  idx = idx + 32
                  continue 
              mem[_140 + 68] = mem[_140 + 70 len 30]
              revert with memory
                from mem[64]
                 len _140 + -mem[64] + 100
          require idx < stor8.length
          mem[0] = stor8[idx]
          mem[32] = 4
          _165 = mem[64]
          mem[64] = mem[64] + 64
          mem[_165] = 30
          mem[_165 + 32] = 'SafeMath: subtraction overflow'
          if stor4[stor8[idx]] <= s:
              idx = idx + 1
              s = s - stor4[stor8[idx]]
              t = t - stor3[stor8[idx]]
              continue 
          _179 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = 30
          idx = 0
          while idx < 30:
              mem[_179 + idx + 68] = mem[_165 + idx + 32]
              idx = idx + 32
              continue 
          mem[_179 + 68] = mem[_179 + 70 len 30]
          revert with memory
            from mem[64]
             len _179 + -mem[64] + 100
      if totalSupply <= 0:
          revert with 0, 'SafeMath: division by zero'
      require totalSupply
      if t >= stor10 / totalSupply:
          if s <= 0:
              revert with 0, 'SafeMath: division by zero'
          require s
          if t / s <= 0:
              revert with 0, 'SafeMath: division by zero'
          require t / s
          stor4[addr(_param1)] = stor3[addr(_param1)] / t / s
      else:
          if totalSupply <= 0:
              revert with 0, 'SafeMath: division by zero'
          require totalSupply
          if stor10 / totalSupply <= 0:
              revert with 0, 'SafeMath: division by zero'
          require stor10 / totalSupply
          stor4[addr(_param1)] = stor3[addr(_param1)] / stor10 / totalSupply
  stor7[addr(_param1)] = 1
  stor8.length++
  stor8[stor8.length] = _param1

Deployed ByteCode Sourcemap:

25961:18358:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33414:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;28349:83;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29261:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;30382:87;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;26921:51;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;28626:95;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;29430:313;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;31306:253;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;28535:83;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;32022:479;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;29751:218;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;26733:26;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;30477:377;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33169:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;30862:436;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;26979:38;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;27058:40;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;31567:447;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;37311:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;26820:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;28729:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16556:148;;;;;;;;;;;;;:::i;:::-;;27111:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;30254:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;15913:79;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;33524:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;28440:87;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29977:269;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;17566:293;;;;;;;;;;;;;:::i;:::-;;28935:167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;17111:89;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;33827:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33657:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;17276:214;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;29110:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;33292:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;16859:244;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33414:98;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33498:6:::1;33488:7;:16;;;;33414:98:::0;:::o;28349:83::-;28386:13;28419:5;28412:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28349:83;:::o;29261:161::-;29336:4;29353:39;29362:12;:10;:12::i;:::-;29376:7;29385:6;29353:8;:39::i;:::-;29410:4;29403:11;;29261:161;;;;:::o;30382:87::-;30424:7;30451:10;;30444:17;;30382:87;:::o;26921:51::-;;;:::o;28626:95::-;28679:7;28706;;28699:14;;28626:95;:::o;29430:313::-;29528:4;29545:36;29555:6;29563:9;29574:6;29545:9;:36::i;:::-;29592:121;29601:6;29609:12;:10;:12::i;:::-;29623:89;29661:6;29623:89;;;;;;;;;;;;;;;;;:11;:19;29635:6;29623:19;;;;;;;;;;;;;;;:33;29643:12;:10;:12::i;:::-;29623:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;29592:8;:121::i;:::-;29731:4;29724:11;;29430:313;;;;;:::o;31306:253::-;31372:7;31411;;31400;:18;;31392:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31476:19;31499:10;:8;:10::i;:::-;31476:33;;31527:24;31539:11;31527:7;:11;;:24;;;;:::i;:::-;31520:31;;;31306:253;;;:::o;28535:83::-;28576:5;28601:9;;;;;;;;;;;28594:16;;28535:83;:::o;32022:479::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32104:11:::1;:20;32116:7;32104:20;;;;;;;;;;;;;;;;;;;;;;;;;32096:60;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;32172:9;32167:327;32191:9;:16;;;;32187:1;:20;32167:327;;;32249:7;32233:23;;:9;32243:1;32233:12;;;;;;;;;;;;;;;;;;;;;;;;;:23;;;32229:254;;;32292:9;32321:1;32302:9;:16;;;;:20;32292:31;;;;;;;;;;;;;;;;;;;;;;;;;32277:9;32287:1;32277:12;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;32361:1;32342:7;:16;32350:7;32342:16;;;;;;;;;;;;;;;:20;;;;32404:5;32381:11;:20;32393:7;32381:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;32428:9;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32462:5;;32229:254;32209:3;;;;;;;32167:327;;;;32022:479:::0;:::o;29751:218::-;29839:4;29856:83;29865:12;:10;:12::i;:::-;29879:7;29888:50;29927:10;29888:11;:25;29900:12;:10;:12::i;:::-;29888:25;;;;;;;;;;;;;;;:34;29914:7;29888:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;29856:8;:83::i;:::-;29957:4;29950:11;;29751:218;;;;:::o;26733:26::-;;;;:::o;30477:377::-;30529:14;30546:12;:10;:12::i;:::-;30529:29;;30578:11;:19;30590:6;30578:19;;;;;;;;;;;;;;;;;;;;;;;;;30577:20;30569:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30658:15;30682:19;30693:7;30682:10;:19::i;:::-;30657:44;;;;;;;30730:28;30750:7;30730;:15;30738:6;30730:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;30712:7;:15;30720:6;30712:15;;;;;;;;;;;;;;;:46;;;;30779:20;30791:7;30779;;:11;;:20;;;;:::i;:::-;30769:7;:30;;;;30823:23;30838:7;30823:10;;:14;;:23;;;;:::i;:::-;30810:10;:36;;;;30477:377;;;:::o;33169:111::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33268:4:::1;33238:18;:27;33257:7;33238:27;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;33169:111:::0;:::o;30862:436::-;30952:7;30991;;30980;:18;;30972:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31050:17;31045:246;;31085:15;31109:19;31120:7;31109:10;:19::i;:::-;31084:44;;;;;;;31150:7;31143:14;;;;;31045:246;31192:23;31223:19;31234:7;31223:10;:19::i;:::-;31190:52;;;;;;;31264:15;31257:22;;;30862:436;;;;;:::o;26979:38::-;;;:::o;27058:40::-;;;;;;;;;;;;;:::o;31567:447::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31764:11:::1;:20;31776:7;31764:20;;;;;;;;;;;;;;;;;;;;;;;;;31763:21;31755:61;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;31849:1;31830:7;:16;31838:7;31830:16;;;;;;;;;;;;;;;;:20;31827:108;;;31886:37;31906:7;:16;31914:7;31906:16;;;;;;;;;;;;;;;;31886:19;:37::i;:::-;31867:7;:16;31875:7;31867:16;;;;;;;;;;;;;;;:56;;;;31827:108;31968:4;31945:11;:20;31957:7;31945:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;31983:9;31998:7;31983:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31567:447:::0;:::o;37311:123::-;37375:4;37399:18;:27;37418:7;37399:27;;;;;;;;;;;;;;;;;;;;;;;;;37392:34;;37311:123;;;:::o;26820:32::-;;;;:::o;28729:198::-;28795:7;28819:11;:20;28831:7;28819:20;;;;;;;;;;;;;;;;;;;;;;;;;28815:49;;;28848:7;:16;28856:7;28848:16;;;;;;;;;;;;;;;;28841:23;;;;28815:49;28882:37;28902:7;:16;28910:7;28902:16;;;;;;;;;;;;;;;;28882:19;:37::i;:::-;28875:44;;28729:198;;;;:::o;16556:148::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16663:1:::1;16626:40;;16647:6;::::0;::::1;;;;;;;;16626:40;;;;;;;;;;;;16694:1;16677:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;16556:148::o:0;27111:50::-;;;;:::o;30254:120::-;30322:4;30346:11;:20;30358:7;30346:20;;;;;;;;;;;;;;;;;;;;;;;;;30339:27;;30254:120;;;:::o;15913:79::-;15951:7;15978:6;;;;;;;;;;;15971:13;;15913:79;:::o;33524:122::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33626:12:::1;33610:13;:28;;;;33524:122:::0;:::o;28440:87::-;28479:13;28512:7;28505:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28440:87;:::o;29977:269::-;30070:4;30087:129;30096:12;:10;:12::i;:::-;30110:7;30119:96;30158:15;30119:96;;;;;;;;;;;;;;;;;:11;:25;30131:12;:10;:12::i;:::-;30119:25;;;;;;;;;;;;;;;:34;30145:7;30119:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;30087:8;:129::i;:::-;30234:4;30227:11;;29977:269;;;;:::o;17566:293::-;17636:10;17618:28;;:14;;;;;;;;;;;:28;;;17610:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17711:9;;17705:3;:15;17697:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17802:14;;;;;;;;;;;17773:44;;17794:6;;;;;;;;;;17773:44;;;;;;;;;;;;17837:14;;;;;;;;;;;17828:6;;:23;;;;;;;;;;;;;;;;;;17566:293::o;28935:167::-;29013:4;29030:42;29040:12;:10;:12::i;:::-;29054:9;29065:6;29030:9;:42::i;:::-;29090:4;29083:11;;28935:167;;;;:::o;17111:89::-;17156:7;17183:9;;17176:16;;17111:89;:::o;33827:171::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33928:8:::1;33904:21;;:32;;;;;;;;;;;;;;;;;;33952:38;33981:8;33952:38;;;;;;;;;;;;;;;;;;;;33827:171:::0;:::o;33657:162::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33751:60:::1;33795:5;33751:25;33763:12;33751:7;;:11;;:25;;;;:::i;:::-;:29;;:60;;;;:::i;:::-;33736:12;:75;;;;33657:162:::0;:::o;17276:214::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17357:6:::1;::::0;::::1;;;;;;;;17340:14;;:23;;;;;;;;;;;;;;;;;;17391:1;17374:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;17422:4;17416:3;:10;17404:9;:22;;;;17479:1;17442:40;;17463:6;::::0;::::1;;;;;;;;17442:40;;;;;;;;;;;;17276:214:::0;:::o;29110:143::-;29191:7;29218:11;:18;29230:5;29218:18;;;;;;;;;;;;;;;:27;29237:7;29218:27;;;;;;;;;;;;;;;;29211:34;;29110:143;;;;:::o;33292:110::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33389:5:::1;33359:18;:27;33378:7;33359:27;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;33292:110:::0;:::o;16859:244::-;16135:12;:10;:12::i;:::-;16125:22;;:6;;;;;;;;;;:22;;;16117:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16968:1:::1;16948:22;;:8;:22;;;;16940:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17058:8;17029:38;;17050:6;::::0;::::1;;;;;;;;17029:38;;;;;;;;;;;;17087:8;17078:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;16859:244:::0;:::o;8321:106::-;8374:15;8409:10;8402:17;;8321:106;:::o;37442:337::-;37552:1;37535:19;;:5;:19;;;;37527:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37633:1;37614:21;;:7;:21;;;;37606:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37717:6;37687:11;:18;37699:5;37687:18;;;;;;;;;;;;;;;:27;37706:7;37687:27;;;;;;;;;;;;;;;:36;;;;37755:7;37739:32;;37748:5;37739:32;;;37764:6;37739:32;;;;;;;;;;;;;;;;;;37442:337;;;:::o;37787:1813::-;37925:1;37909:18;;:4;:18;;;;37901:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38002:1;37988:16;;:2;:16;;;;37980:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38072:1;38063:6;:10;38055:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38141:7;:5;:7::i;:::-;38133:15;;:4;:15;;;;:32;;;;;38158:7;:5;:7::i;:::-;38152:13;;:2;:13;;;;38133:32;38130:125;;;38198:12;;38188:6;:22;;38180:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38130:125;38550:28;38581:24;38599:4;38581:9;:24::i;:::-;38550:55;;38653:12;;38629:20;:36;38626:112;;38714:12;;38691:35;;38626:112;38758:24;38809:29;;38785:20;:53;;38758:80;;38867:19;:53;;;;;38904:16;;;;;;;;;;;38903:17;38867:53;:91;;;;;38945:13;38937:21;;:4;:21;;;;38867:91;:129;;;;;38975:21;;;;;;;;;;;38867:129;38849:318;;;39046:29;;39023:52;;39119:36;39134:20;39119:14;:36::i;:::-;38849:318;39248:12;39263:4;39248:19;;39375:18;:24;39394:4;39375:24;;;;;;;;;;;;;;;;;;;;;;;;;:50;;;;39403:18;:22;39422:2;39403:22;;;;;;;;;;;;;;;;;;;;;;;;;39375:50;39372:96;;;39451:5;39441:15;;39372:96;39554:38;39569:4;39574:2;39577:6;39584:7;39554:14;:38::i;:::-;37787:1813;;;;;;:::o;4731:192::-;4817:7;4850:1;4845;:6;;4853:12;4837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4877:9;4893:1;4889;:5;4877:17;;4914:1;4907:8;;;4731:192;;;;;:::o;35461:163::-;35502:7;35523:15;35540;35559:19;:17;:19::i;:::-;35522:56;;;;35596:20;35608:7;35596;:11;;:20;;;;:::i;:::-;35589:27;;;;35461:163;:::o;6129:132::-;6187:7;6214:39;6218:1;6221;6214:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;6207:46;;6129:132;;;;:::o;3828:181::-;3886:7;3906:9;3922:1;3918;:5;3906:17;;3947:1;3942;:6;;3934:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4000:1;3993:8;;;3828:181;;;;:::o;34259:419::-;34318:7;34327;34336;34345;34354;34363;34384:23;34409:12;34423:18;34445:20;34457:7;34445:11;:20::i;:::-;34383:82;;;;;;34477:15;34494:23;34519:12;34535:50;34547:7;34556:4;34562:10;34574;:8;:10::i;:::-;34535:11;:50::i;:::-;34476:109;;;;;;34604:7;34613:15;34630:4;34636:15;34653:4;34659:10;34596:74;;;;;;;;;;;;;;;;;;34259:419;;;;;;;:::o;4292:136::-;4350:7;4377:43;4381:1;4384;4377:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;4370:50;;4292:136;;;;:::o;5182:471::-;5240:7;5490:1;5485;:6;5481:47;;;5515:1;5508:8;;;;5481:47;5540:9;5556:1;5552;:5;5540:17;;5585:1;5580;5576;:5;;;;;;:10;5568:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5644:1;5637:8;;;5182:471;;;;;:::o;39608:985::-;27561:4;27542:16;;:23;;;;;;;;;;;;;;;;;;39744:12:::1;39759:27;39784:1;39759:20;:24;;:27;;;;:::i;:::-;39744:42;;39797:17;39817:30;39842:4;39817:20;:24;;:30;;;;:::i;:::-;39797:50;;40125:22;40150:21;40125:46;;40216:22;40233:4;40216:16;:22::i;:::-;40369:18;40390:41;40416:14;40390:21;:25;;:41;;;;:::i;:::-;40369:62;;40481:35;40494:9;40505:10;40481:12;:35::i;:::-;40542:43;40557:4;40563:10;40575:9;40542:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27576:1;;;;27607:5:::0;27588:16;;:24;;;;;;;;;;;;;;;;;;39608:985;:::o;41792:834::-;41903:7;41899:40;;41925:14;:12;:14::i;:::-;41899:40;41964:11;:19;41976:6;41964:19;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;;;41988:11;:22;42000:9;41988:22;;;;;;;;;;;;;;;;;;;;;;;;;41987:23;41964:46;41960:597;;;42027:48;42049:6;42057:9;42068:6;42027:21;:48::i;:::-;41960:597;;;42098:11;:19;42110:6;42098:19;;;;;;;;;;;;;;;;;;;;;;;;;42097:20;:46;;;;;42121:11;:22;42133:9;42121:22;;;;;;;;;;;;;;;;;;;;;;;;;42097:46;42093:464;;;42160:46;42180:6;42188:9;42199:6;42160:19;:46::i;:::-;42093:464;;;42229:11;:19;42241:6;42229:19;;;;;;;;;;;;;;;;;;;;;;;;;42228:20;:47;;;;;42253:11;:22;42265:9;42253:22;;;;;;;;;;;;;;;;;;;;;;;;;42252:23;42228:47;42224:333;;;42292:44;42310:6;42318:9;42329:6;42292:17;:44::i;:::-;42224:333;;;42358:11;:19;42370:6;42358:19;;;;;;;;;;;;;;;;;;;;;;;;;:45;;;;;42381:11;:22;42393:9;42381:22;;;;;;;;;;;;;;;;;;;;;;;;;42358:45;42354:203;;;42420:48;42442:6;42450:9;42461:6;42420:21;:48::i;:::-;42354:203;;;42501:44;42519:6;42527:9;42538:6;42501:17;:44::i;:::-;42354:203;42224:333;42093:464;41960:597;42581:7;42577:41;;42603:15;:13;:15::i;:::-;42577:41;41792:834;;;;:::o;35632:561::-;35682:7;35691;35711:15;35729:7;;35711:25;;35747:15;35765:7;;35747:25;;35794:9;35789:289;35813:9;:16;;;;35809:1;:20;35789:289;;;35879:7;35855;:21;35863:9;35873:1;35863:12;;;;;;;;;;;;;;;;;;;;;;;;;35855:21;;;;;;;;;;;;;;;;:31;:66;;;;35914:7;35890;:21;35898:9;35908:1;35898:12;;;;;;;;;;;;;;;;;;;;;;;;;35890:21;;;;;;;;;;;;;;;;:31;35855:66;35851:97;;;35931:7;;35940;;35923:25;;;;;;;;;35851:97;35973:34;35985:7;:21;35993:9;36003:1;35993:12;;;;;;;;;;;;;;;;;;;;;;;;;35985:21;;;;;;;;;;;;;;;;35973:7;:11;;:34;;;;:::i;:::-;35963:44;;36032:34;36044:7;:21;36052:9;36062:1;36052:12;;;;;;;;;;;;;;;;;;;;;;;;;36044:21;;;;;;;;;;;;;;;;36032:7;:11;;:34;;;;:::i;:::-;36022:44;;35831:3;;;;;;;35789:289;;;;36102:20;36114:7;;36102;;:11;;:20;;;;:::i;:::-;36092:7;:30;36088:61;;;36132:7;;36141;;36124:25;;;;;;;;36088:61;36168:7;36177;36160:25;;;;;;35632:561;;;:::o;6757:278::-;6843:7;6875:1;6871;:5;6878:12;6863:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6902:9;6918:1;6914;:5;;;;;;6902:17;;7026:1;7019:8;;;6757:278;;;;;:::o;34686:330::-;34746:7;34755;34764;34784:12;34799:24;34815:7;34799:15;:24::i;:::-;34784:39;;34834:18;34855:30;34877:7;34855:21;:30::i;:::-;34834:51;;34896:23;34922:33;34944:10;34922:17;34934:4;34922:7;:11;;:17;;;;:::i;:::-;:21;;:33;;;;:::i;:::-;34896:59;;34974:15;34991:4;34997:10;34966:42;;;;;;;;;34686:330;;;;;:::o;35024:429::-;35139:7;35148;35157;35177:15;35195:24;35207:11;35195:7;:11;;:24;;;;:::i;:::-;35177:42;;35230:12;35245:21;35254:11;35245:4;:8;;:21;;;;:::i;:::-;35230:36;;35277:18;35298:27;35313:11;35298:10;:14;;:27;;;;:::i;:::-;35277:48;;35336:23;35362:33;35384:10;35362:17;35374:4;35362:7;:11;;:17;;;;:::i;:::-;:21;;:33;;;;:::i;:::-;35336:59;;35414:7;35423:15;35440:4;35406:39;;;;;;;;;;35024:429;;;;;;;;:::o;40601:589::-;40727:21;40765:1;40751:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40727:40;;40796:4;40778;40783:1;40778:7;;;;;;;;;;;;;:23;;;;;;;;;;;40822:15;:20;;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40812:4;40817:1;40812:7;;;;;;;;;;;;;:32;;;;;;;;;;;40857:62;40874:4;40889:15;40907:11;40857:8;:62::i;:::-;40958:15;:66;;;41039:11;41065:1;41109:4;41136;41156:15;40958:224;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40601:589;;:::o;41198:513::-;41346:62;41363:4;41378:15;41396:11;41346:8;:62::i;:::-;41451:15;:31;;;41490:9;41523:4;41543:11;41569:1;41612;41655:7;:5;:7::i;:::-;41677:15;41451:252;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41198:513;;:::o;36912:250::-;36969:1;36958:7;;:12;:34;;;;;36991:1;36974:13;;:18;36958:34;36955:46;;;36994:7;;36955:46;37039:7;;37021:15;:25;;;;37081:13;;37057:21;:37;;;;37125:1;37115:7;:11;;;;37153:1;37137:13;:17;;;;36912:250;:::o;43738:566::-;43841:15;43858:23;43883:12;43897:23;43922:12;43936:18;43958:19;43969:7;43958:10;:19::i;:::-;43840:137;;;;;;;;;;;;44006:28;44026:7;44006;:15;44014:6;44006:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;43988:7;:15;43996:6;43988:15;;;;;;;;;;;;;;;:46;;;;44063:28;44083:7;44063;:15;44071:6;44063:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;44045:7;:15;44053:6;44045:15;;;;;;;;;;;;;;;:46;;;;44123:39;44146:15;44123:7;:18;44131:9;44123:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;44102:7;:18;44110:9;44102:18;;;;;;;;;;;;;;;:60;;;;44176:26;44191:10;44176:14;:26::i;:::-;44213:23;44225:4;44231;44213:11;:23::i;:::-;44269:9;44252:44;;44261:6;44252:44;;;44280:15;44252:44;;;;;;;;;;;;;;;;;;43738:566;;;;;;;;;:::o;43144:586::-;43245:15;43262:23;43287:12;43301:23;43326:12;43340:18;43362:19;43373:7;43362:10;:19::i;:::-;43244:137;;;;;;;;;;;;43410:28;43430:7;43410;:15;43418:6;43410:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;43392:7;:15;43400:6;43392:15;;;;;;;;;;;;;;;:46;;;;43470:39;43493:15;43470:7;:18;43478:9;43470:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;43449:7;:18;43457:9;43449:18;;;;;;;;;;;;;;;:60;;;;43541:39;43564:15;43541:7;:18;43549:9;43541:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;43520:7;:18;43528:9;43520:18;;;;;;;;;;;;;;;:60;;;;43602:26;43617:10;43602:14;:26::i;:::-;43639:23;43651:4;43657;43639:11;:23::i;:::-;43695:9;43678:44;;43687:6;43678:44;;;43706:15;43678:44;;;;;;;;;;;;;;;;;;43144:586;;;;;;;;;:::o;42634:502::-;42733:15;42750:23;42775:12;42789:23;42814:12;42828:18;42850:19;42861:7;42850:10;:19::i;:::-;42732:137;;;;;;;;;;;;42898:28;42918:7;42898;:15;42906:6;42898:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;42880:7;:15;42888:6;42880:15;;;;;;;;;;;;;;;:46;;;;42958:39;42981:15;42958:7;:18;42966:9;42958:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;42937:7;:18;42945:9;42937:18;;;;;;;;;;;;;;;:60;;;;43008:26;43023:10;43008:14;:26::i;:::-;43045:23;43057:4;43063;43045:11;:23::i;:::-;43101:9;43084:44;;43093:6;43084:44;;;43112:15;43084:44;;;;;;;;;;;;;;;;;;42634:502;;;;;;;;;:::o;32511:642::-;32614:15;32631:23;32656:12;32670:23;32695:12;32709:18;32731:19;32742:7;32731:10;:19::i;:::-;32613:137;;;;;;;;;;;;32779:28;32799:7;32779;:15;32787:6;32779:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;32761:7;:15;32769:6;32761:15;;;;;;;;;;;;;;;:46;;;;32836:28;32856:7;32836;:15;32844:6;32836:15;;;;;;;;;;;;;;;;:19;;:28;;;;:::i;:::-;32818:7;:15;32826:6;32818:15;;;;;;;;;;;;;;;:46;;;;32896:39;32919:15;32896:7;:18;32904:9;32896:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;32875:7;:18;32883:9;32875:18;;;;;;;;;;;;;;;:60;;;;32967:39;32990:15;32967:7;:18;32975:9;32967:18;;;;;;;;;;;;;;;;:22;;:39;;;;:::i;:::-;32946:7;:18;32954:9;32946:18;;;;;;;;;;;;;;;:60;;;;33025:26;33040:10;33025:14;:26::i;:::-;33062:23;33074:4;33080;33062:11;:23::i;:::-;33118:9;33101:44;;33110:6;33101:44;;;33129:15;33101:44;;;;;;;;;;;;;;;;;;32511:642;;;;;;;;;:::o;37174:125::-;37228:15;;37218:7;:25;;;;37270:21;;37254:13;:37;;;;37174:125::o;36572:154::-;36636:7;36663:55;36702:5;36663:20;36675:7;;36663;:11;;:20;;;;:::i;:::-;:24;;:55;;;;:::i;:::-;36656:62;;36572:154;;;:::o;36734:166::-;36804:7;36831:61;36876:5;36831:26;36843:13;;36831:7;:11;;:26;;;;:::i;:::-;:30;;:61;;;;:::i;:::-;36824:68;;36734:166;;;:::o;36205:355::-;36268:19;36291:10;:8;:10::i;:::-;36268:33;;36312:18;36333:27;36348:11;36333:10;:14;;:27;;;;:::i;:::-;36312:48;;36396:38;36423:10;36396:7;:22;36412:4;36396:22;;;;;;;;;;;;;;;;:26;;:38;;;;:::i;:::-;36371:7;:22;36387:4;36371:22;;;;;;;;;;;;;;;:63;;;;36448:11;:26;36468:4;36448:26;;;;;;;;;;;;;;;;;;;;;;;;;36445:107;;;36514:38;36541:10;36514:7;:22;36530:4;36514:22;;;;;;;;;;;;;;;;:26;;:38;;;;:::i;:::-;36489:7;:22;36505:4;36489:22;;;;;;;;;;;;;;;:63;;;;36445:107;36205:355;;;:::o;34104:147::-;34182:17;34194:4;34182:7;;:11;;:17;;;;:::i;:::-;34172:7;:27;;;;34223:20;34238:4;34223:10;;:14;;:20;;;;:::i;:::-;34210:10;:33;;;;34104:147;;:::o

Swarm Source:

ipfs://d5c48d972f924948b917b34654349f30c5fb4b43c3d5dd48ec2d9bbfabd3d2ab